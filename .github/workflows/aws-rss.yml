name: AWS RSS to Discord

on:
  schedule:
    # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
    - cron: '*/30 * * * *'
  workflow_dispatch: # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ

jobs:
  check-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install rss-parser node-fetch@2
        
    - name: Check RSS and send to Discord
      run: |
        cat << 'EOF' > check-rss.js
        const Parser = require('rss-parser');
        const fetch = require('node-fetch');
        const fs = require('fs');
        
        const parser = new Parser();
        const RSS_URL = 'https://aws.amazon.com/about-aws/whats-new/recent/feed/';
        const WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;
        const LAST_ITEMS_FILE = 'last-items.json';
        
        async function main() {
          try {
            console.log('üîç Checking AWS RSS feed...');
            
            // ‡∏≠‡πà‡∏≤‡∏ô RSS feed
            const feed = await parser.parseURL(RSS_URL);
            console.log(`üì∞ Found ${feed.items.length} items in feed`);
            
            // ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            let lastItems = [];
            try {
              if (fs.existsSync(LAST_ITEMS_FILE)) {
                lastItems = JSON.parse(fs.readFileSync(LAST_ITEMS_FILE, 'utf8'));
              }
            } catch (error) {
              console.log('üìù No previous items found, treating all as new');
            }
            
            // ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
            const lastItemIds = lastItems.map(item => item.guid || item.link);
            const newItems = feed.items.filter(item => 
              !lastItemIds.includes(item.guid || item.link)
            );
            
            console.log(`üÜï Found ${newItems.length} new items`);
            
            // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
            for (const item of newItems.slice(0, 5)) { // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              await sendToDiscord(item);
              await new Promise(resolve => setTimeout(resolve, 1000)); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            }
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏Å‡πá‡∏ö 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
            const itemsToSave = feed.items.slice(0, 20).map(item => ({
              guid: item.guid || item.link,
              link: item.link,
              title: item.title,
              pubDate: item.pubDate
            }));
            
            fs.writeFileSync(LAST_ITEMS_FILE, JSON.stringify(itemsToSave, null, 2));
            console.log('üíæ Saved latest items');
            
          } catch (error) {
            console.error('‚ùå Error:', error);
          }
        }
        
        async function sendToDiscord(item) {
          try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
            const embed = {
              title: item.title.length > 256 ? item.title.substring(0, 253) + '...' : item.title,
              url: item.link,
              description: item.contentSnippet ? 
                (item.contentSnippet.length > 500 ? 
                  item.contentSnippet.substring(0, 497) + '...' : 
                  item.contentSnippet) : 'No description available',
              color: 0xFF9900, // AWS orange color
              timestamp: item.isoDate || item.pubDate,
              footer: {
                text: 'AWS What\'s New',
                icon_url: 'https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico'
              },
              fields: [
                {
                  name: 'üìÖ Published',
                  value: new Date(item.pubDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  }),
                  inline: true
                }
              ]
            };
            
            const payload = {
              username: 'AWS Updates',
              avatar_url: 'https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico',
              embeds: [embed]
            };
            
            const response = await fetch(WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload)
            });
            
            if (response.ok) {
              console.log(`‚úÖ Sent: ${item.title.substring(0, 50)}...`);
            } else {
              console.error(`‚ùå Failed to send: ${response.status}`);
            }
            
          } catch (error) {
            console.error('‚ùå Error sending to Discord:', error);
          }
        }
        
        main();
        EOF
        
        node check-rss.js
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        
    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if [ -f last-items.json ]; then
          git add last-items.json
          git diff --staged --quiet || git commit -m "Update last items cache"
          git push
        fi
