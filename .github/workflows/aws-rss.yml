name: AWS RSS to Discord (Ultra Simple)

on:
  schedule:
    # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    - cron: '*/5 * * * *'
  workflow_dispatch: # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ

jobs:
  check-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install rss-parser node-fetch@2
        
    - name: Check RSS and send to Discord
      run: |
        cat << 'EOF' > check-rss.js
        const Parser = require('rss-parser');
        const fetch = require('node-fetch');
        
        const parser = new Parser();
        const RSS_URL = 'https://aws.amazon.com/about-aws/whats-new/recent/feed/';
        const WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;
        
        async function main() {
          try {
            console.log('üîç Checking AWS RSS feed...');
            
            // ‡∏≠‡πà‡∏≤‡∏ô RSS feed
            const feed = await parser.parseURL(RSS_URL);
            console.log(`üì∞ Found ${feed.items.length} items in feed`);
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å)
            const now = new Date();
            const cutoffTime = new Date(now.getTime() - 1440 * 60 * 1000); // 1440 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            console.log(`‚è∞ Current time: ${now.toISOString()} (${now.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})} Bangkok)`);
            console.log(`‚è∞ Looking for items newer than: ${cutoffTime.toISOString()} (${cutoffTime.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})} Bangkok)`);
            
            const recentItems = feed.items.filter(item => {
              const itemDate = new Date(item.pubDate);
              const isRecent = itemDate >= cutoffTime;
              
              console.log(`üì∞ Item: ${item.title.substring(0, 50)}...`);
              console.log(`   üìÖ Published: ${itemDate.toISOString()} (${itemDate.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})} Bangkok)`);
              
              if (isRecent) {
                const ageMinutes = Math.round((now - itemDate) / (1000 * 60));
                console.log(`   ‚ú® RECENT! Age: ${ageMinutes} minutes`);
              } else {
                const ageMinutes = Math.round((now - itemDate) / (1000 * 60));
                console.log(`   ‚è∞ Too old: ${ageMinutes} minutes`);
              }
              
              return isRecent;
            });
            
            console.log(`üÜï Found ${recentItems.length} items from last 3 minutes`);
            
            // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
            if (recentItems.length > 0) {
              console.log(`üì§ Sending ${recentItems.length} new items to Discord...`);
              
              for (let i = 0; i < recentItems.length; i++) {
                const item = recentItems[i];
                await sendToDiscord(item, i + 1, recentItems.length);
                
                // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Discord rate limit
                if (i < recentItems.length - 1) {
                  await new Promise(resolve => setTimeout(resolve, 2000));
                }
              }
            } else {
              console.log('üì≠ No new items to send (no items in last 1440 minutes)');
            }
            
          } catch (error) {
            console.error('‚ùå Error:', error);
          }
        }
        
        async function sendToDiscord(item, index = 1, total = 1) {
          try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
            const embed = {
              title: item.title.length > 256 ? item.title.substring(0, 253) + '...' : item.title,
              url: item.link,
              description: item.contentSnippet ? 
                (item.contentSnippet.length > 500 ? 
                  item.contentSnippet.substring(0, 497) + '...' : 
                  item.contentSnippet) : 'No description available',
              color: 0xFF9900, // AWS orange color
              timestamp: item.isoDate || item.pubDate,
              footer: {
                text: `AWS What's New ‚Ä¢ ${index}/${total}`,
                icon_url: 'https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico'
              },
              fields: [
                {
                  name: 'üìÖ Published',
                  value: new Date(item.pubDate).toLocaleDateString('th-TH', {
                    timeZone: 'Asia/Bangkok',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                  }) + ' (Bangkok)',
                  inline: true
                }
              ]
            };
            
            const payload = {
              username: 'AWS Updates',
              avatar_url: 'https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico',
              embeds: [embed]
            };
            
            const response = await fetch(WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload)
            });
            
            if (response.ok) {
              console.log(`‚úÖ Sent: ${item.title.substring(0, 50)}...`);
            } else {
              const errorText = await response.text();
              console.error(`‚ùå Failed to send to Discord: ${response.status} - ${errorText}`);
            }
            
          } catch (error) {
            console.error('‚ùå Error sending to Discord:', error);
          }
        }
        
        main();
        EOF
        
        node check-rss.js
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
